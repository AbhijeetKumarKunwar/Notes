what is system design ?
Systems design is the use of computer engineering principles to build large scale distributed systems. 
It involves converting business problems and requirements into technical solutions. Senior engineers use system design patterns to make reliable, scalable 
and maintainable systems.

System design involves creating both a High-Level Design (HLD), which is like a roadmap showing the overall plan, and a Low-Level Design (LLD),
which is a detailed guide for programmers on how to build each part. It ensures a well-organized and smoothly functioning project. 
High-Level Design and Low-Level Design are the two main aspects of System Design.

Solid principle:-
https://www.freecodecamp.org/news/solid-design-principles-in-software-development/#whataresoliddesignprinciples

Factory Design Pattern(creational design patter-where object is created):-

A Factory Pattern or Factory Method Pattern says that just define an interface or abstract class for creating an object but
let the subclasses decide which class to instantiate. In other words, subclasses are responsible to create the instance of the class.
https://www.javatpoint.com/factory-method-design-pattern

Abstract factory pattern:-
https://www.geeksforgeeks.org/abstract-factory-pattern/

Builder Design pattern(creational design pattern):-
https://github.com/Design-pattrns/Builder-Pattern
Object Pool design pattern:-(creational design pattern):-
https://notebook.zohopublic.in/public/notes/dcr5za494c035adb441818e2bc20485b4de58
The aove example show if we don't have sigleton pattern in that case someone will create two manager object and one more set of three
connectin object will be created and we will loose the target achievement.
methods are thread safe if multiple threads are trying to make connection our list will not get corrupted in that case.
Creational design pattern:-
https://gitlab.com/shrayansh8/interviewcodingpractise/-/blob/main/src/LowLevelDesign/All_Creational_Pattern-1_Screenshot.png

Strategy Design Pattern:-
The problem statement for this case is -when child class override the parent method but sometime child classes need some feature
which are not there in the parent class in that case all childs class will write that method which will be kind of duplicate 
in all child class. we will create one class which will have that feature and it will be implemented for all kind of use case and 
the parent class will have referance of this class which will initialise by constructor. when we wil call the metod of that class
whcih we created that class method will be called, that is dynamic thing.we can understand this by the below ex-
https://www.freecodecamp.org/news/a-beginners-guide-to-the-strategy-design-pattern/

Null object pattern:-(behaviour design pattern)
Problem-when we are writing any method where input is any object and we have to compute over the object, there problem occur, like
void printName(Student s)
{
Sop(s.getName())// here s can be null .we have to have null check before any operation over the obj but we have
to write this at every place in such case across project.

}

